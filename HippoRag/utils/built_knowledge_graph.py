import networkx as nx

def build_knowledge_graph_from_llm(triples):
    """
    Build a schemaless knowledge graph from the triples generated by the LLM.
    """
    G = nx.DiGraph()

    # Check the format of triples before attempting to unpack
    for triple in triples:
        if isinstance(triple, tuple) and len(triple) == 3:
            head, relation, tail = triple
        elif isinstance(triple, dict):
            # If the triple is a dictionary (e.g., {head: relation, tail: ...})
            head = triple.get('head')
            relation = triple.get('relation')
            tail = triple.get('tail')
        else:
            # Handle unexpected format or log it
            print(f"Unexpected format: {triple}")
            continue

        # Normalize text and add to graph
        head_normalized = normalize_text(head)
        tail_normalized = normalize_text(tail)

        # Check if the edge is being added correctly
        print(f"Adding edge: {head_normalized} -[{relation}]-> {tail_normalized}")
        G.add_edge(head_normalized, tail_normalized, label=relation)

    # Return the graph
    return G

def normalize_text(text):
    """
    Normalize text by lowercasing and stripping special characters.
    """
    return text.lower().strip()